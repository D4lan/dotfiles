"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"
"               ██╗   ██╗██╗███╗   ███╗██████╗  ██████╗
"               ██║   ██║██║████╗ ████║██╔══██╗██╔════╝
"               ██║   ██║██║██╔████╔██║██████╔╝██║
"               ╚██╗ ██╔╝██║██║╚██╔╝██║██╔══██╗██║
"                ╚████╔╝ ██║██║ ╚═╝ ██║██║  ██║╚██████╗
"                 ╚═══╝  ╚═╝╚═╝     ╚═╝╚═╝  ╚═╝ ╚═════╝
"
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" GLOBAL ----------------------------------------------------------------{{{

set nocompatible
set background=dark
set termguicolors
syntax enable
filetype on
filetype plugin on
set number relativenumber
set foldenable
set ignorecase
set incsearch
set hlsearch
set hidden
let &t_Co=256
let g:markdown_folding = 1
let g:markdown_syntax_conceal = 1
let g:netrw_liststyle = 3
let g:netrw_banner = 0
let g:netrw_winsize = 75
let &t_ZH="\e[3m"
let &t_ZR="\e[23m"
set directory^=$HOME/.vim/tmp//
set wildmenu
set wildmode=list:longest
set wildignore=*.doc:,*.jpg,*.png,*.gif,*.pdf,*.pyc,*.exe,*.flv,*.img,*.xlsx
set spell spelllang=en_us
set backspace=indent,eol,start
let mapleader = ","

" }}}

" PLUGINS ----------------------------------------------------------------{{{
call plug#begin('~/.vim/plugged')

Plug 'vimwiki/vimwiki'
Plug 'Konfekt/FastFold'
Plug 'junegunn/limelight.vim'
Plug 'junegunn/goyo.vim'
Plug 'preservim/vim-pencil'

"Themes
Plug 'dracula/vim', { 'as': 'dracula' }
"Plug 'vim-airline/vim-airline'
"Plug 'vim-airline/vim-airline-themes'
"Plug 'lifepillar/vim-solarized8'
"Plug 'kyoz/purify', { 'rtp': 'vim' }

call plug#end()

" vimwiki settings
let g:vimwiki_list = [{'path': '~/Google\ Drive/My\ Drive/Notes/Wiki/',
                               \ 'syntax': 'markdown', 'ext': '.md',
                               \ 'path_html': '~/Google\ Drive/My\ Drive/Notes/Wiki/wiki_html'}]
let g:vimwiki_folding = 'expr'
let g:vimwiki_global_ext = 0
nnoremap <leader>w<leader>t :VimwikiMakeDiaryNote<CR>zM:$<CR>o<ESC>0C#<Space><c-r>=strftime("%I:%M %p")<cr><cr><cr><up><tab>-<Space>
nnoremap <leader>w<leader>d :let@a=''<CR>:g/-<Space>\[<Space>\]/yank<Space>A<CR>:%s/<Space>\[<Space>\]//g<CR>:e<Space>/Volumes/GoogleDrive/My Drive/Notes/Wiki/List.md<CR>Gp

" Pencil
let g:pencil#autoformat = 0
let g:pencil#textwidth = 120

" Goyo/limelight
let g:goyo_width = 121
let g:limelight_conceal_ctermfg = 'gray'
function! s:goyo_enter()
    if executable('tmux') && strlen($TMUX)
      silent !tmux set status off
      silent !tmux list-panes -F '\#F' | grep -q Z || tmux resize-pane -Z
    endif
    Limelight
    Pencil
    set nobreakindent
    set noautoindent
    set noshowmode
    set noshowcmd
endfunction

function! s:goyo_leave()
    if executable('tmux') && strlen($TMUX)
      silent !tmux set status on
      silent !tmux list-panes -F '\#F' | grep -q Z && tmux resize-pane -Z
    endif
    Limelight!
    PencilOff
    set showmode
    set showcmd
    set autoindent
    set breakindent
endfunction

autocmd! User GoyoEnter nested call <SID>goyo_enter()
autocmd! User GoyoLeave nested call <SID>goyo_leave()
nnoremap <leader>p :Goyo<CR>

" Themes
let g:dracula_colorterm = 0
colorscheme dracula
"let g:airline_powerline_fonts = 1
"let g:airline_theme='zenburn'
"
"if !exists('g:airline_symbols')
"    let g:airline_symbols = {}
"endif
"
"" unicode symbols
"let g:airline_left_sep = '»'
"let g:airline_left_sep = '▶'
"let g:airline_right_sep = '«'
"let g:airline_right_sep = '◀'
"let g:airline_symbols.linenr = '␊'
"let g:airline_symbols.linenr = '␤'
"let g:airline_symbols.linenr = '¶'
"let g:airline_symbols.branch = '⎇'
"let g:airline_symbols.paste = 'ρ'
"let g:airline_symbols.paste = 'Þ'
"let g:airline_symbols.paste = '∥'
"let g:airline_symbols.whitespace = 'Ξ'
"
"" airline symbols
"let g:airline_left_sep = ''
"let g:airline_left_alt_sep = ''
"let g:airline_right_sep = ''
"let g:airline_right_alt_sep = ''
"let g:airline_symbols.branch = ''
"let g:airline_symbols.readonly = ''
"let g:airline_symbols.linenr = ''

highlight Folded ctermfg=102 guibg=NONE ctermbg=NONE

" }}}

" MAPPINGS ---------------------------------------------------------------{{{

nnoremap Y y$

inoremap <m-bs> <c-w>
nnoremap <c-s> [s1z=<c-o>
vnoremap . :norm.<CR>
iab wdate ## <c-r>=strftime("%a, %b %d %Y")<cr><cr><tab>-
iab idate <c-r>=strftime("%a, %b %d %Y")<cr>
iab idtime <c-r>=strftime("%I:%M %p")<cr>

" Folding
nnoremap <silent> <leader>zj :<c-u>call RepeatCmd('call NextClosedFold("j")')<cr>
nnoremap <silent> <leader>zk :<c-u>call RepeatCmd('call NextClosedFold("k")')<cr>

" Buffer management
nnoremap gb :ls<CR>:b<Space>
set wildcharm=<C-z>
nnoremap <leader>b :buffer <C-z><S-Tab>
nnoremap <leader>B :sbuffer <C-z><S-Tab>
nnoremap <PageUp>   :bprevious<CR>
nnoremap <PageDown> :bnext<CR>

" }}}

" VIMSCRIPT --------------------------------------------------------------{{{

" Autowite .vimrc File
autocmd BufWritePost ~/.local/share/chezmoi/* ! chezmoi apply --source-path "%"
autocmd! bufwritepost .vimrc source ~/.vimrc


" This will enable code folding in .vimrc
augroup filetype_vim
    autocmd!
    autocmd FileType vim setlocal foldmethod=marker
augroup END

" Install vim plug if not installed
let data_dir = has('nvim') ? stdpath('data') . '/site' : '~/.vim'
if empty(glob(data_dir . '/autoload/plug.vim'))
  silent execute '!curl -fLo '.data_dir.'/autoload/plug.vim --create-dirs  https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim'
  autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
endif

if version >= 703
    set undodir=~/.vim/undodir
    set undofile
    set undoreload=10000
endif

" Goto next fold
function! NextClosedFold(dir)
    let cmd = 'norm!z' . a:dir
    let view = winsaveview()
    let [l0, l, open] = [0, view.lnum, 1]
    while l != l0 && open
        exe cmd
        let [l0, l] = [l, line('.')]
        let open = foldclosed(l) < 0
    endwhile
    if open
        call winrestview(view)
    endif
endfunction

function! RepeatCmd(cmd) range abort
    let n = v:count < 1 ? 1 : v:count
    while n > 0
        exe a:cmd
        let n -= 1
    endwhile
endfunction

"Use 24-bit (true-color) mode in Vim/Neovim when outside tmux.
"If you're using tmux version 2.2 or later, you can remove the outermost $TMUX check and use tmux's 24-bit color support
"(see < http://sunaku.github.io/tmux-24bit-color.html#usage > for more information.)
if (empty($TMUX))
  if (has("nvim"))
    "For Neovim 0.1.3 and 0.1.4 < https://github.com/neovim/neovim/pull/2198 >
    let $NVIM_TUI_ENABLE_TRUE_COLOR=1
  endif
  "For Neovim > 0.1.5 and Vim > patch 7.4.1799 < https://github.com/vim/vim/commit/61be73bb0f965a895bfb064ea3e55476ac175162 >
  "Based on Vim patch 7.4.1770 (`guicolors` option) < https://github.com/vim/vim/commit/8a633e3427b47286869aa4b96f2bfc1fe65b25cd >
  " < https://github.com/neovim/neovim/wiki/Following-HEAD#20160511 >
  if (has("termguicolors"))
    set termguicolors
  endif
endif

" }}}

" STATUS LINE ------------------------------------------------------------{{{

" Clear status line when vimrc is reloaded.
"set statusline=

" Status line left side.
"set statusline+=\ %F\ %M\ %Y\ %R

" Use a divider to separate the left side from the right side.
"set statusline+=%=

" Status line right side.
"set statusline+=\ ascii:\ %b\ hex:\ 0x%B\ row:\ %l\ col:\ %c\ percent:\ %p%%

" Show the status on the second to last line.
"set laststatus=2

" }}}
